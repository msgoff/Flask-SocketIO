    @@grammar::CALC


    start = expression $ ;

    expression
        =
        | expression '+' term
        | expression '-' term
        | expression cmpop expression
        | term
        ;
   
    term
        =
        | term '*' factor
        | term '/' factor
        | factor
        ;

    factor
        =
        | '(' expression ')'
        | latex 
        | symbol
        ;
    
    cmpop 
        = 
        | Equal
        | NotEq 
        | Lt 
        | LtE 
        | Gt 
        | GtE ;

    Equal = '=' ;
    NotEq =  '!=' ;
    Lt =  '<' ;
    LtE =  '<=';
    Gt =  '>';
    GtE = '>=' ;


    latex 
        =
        |func_lim
        |func_int
        |func_sum
        |func_prod
        |func_log
        |func_ln
        |func_sin
        |func_cos
        |func_tan
        |func_csc
        |func_sec
        |func_cot
        |func_arcsin
        |func_arccos
        |func_arctan
        |func_arccsc
        |func_arcsec
        |func_arccot
        |func_sinh
        |func_cosh
        |func_tanh
        |func_arsinh
        |func_arcosh
        |func_artanh
        |func_sqrt
        
        |   greek_alpha
        |   greek_beta
        |   greek_gamma
        |   greek_mu
        |   greek_phi
        |   greek_pi
        |   greek_varphi
        
        |   accent_hat
        |   accent_bar
        |   accent_prime
        
        |   cmd_times
        |   cmd_cdot
        |   cmd_div
        |   cmd_frac
        |   cmd_mathig
        ;
      
        cmd_times = '\\times';
        cmd_cdot =   '\\cdot';
        cmd_div =    '\\div';
        cmd_frac =   '\\frac';
        cmd_mathig =  '\\mathit';
        
        accent_hat = "\\hat"
        ;
        
        accent_bar = "\\bar"
        ;
        
        accent_prime = "\\prime"
        ;

        greek_alpha = 
            |   "\\alpha"
            |   "\\Alpha"
            ; 

        greek_beta = 
            |   "\\beta"
            |   "\\Beta"
            ; 
        
        greek_gamma = 
            |   "\\gamma"
            |   "\\Gamma"
            ;
        
        greek_mu = 
            |   "\\mu" 
            |   "\\Mu"
            ;
        
        greek_phi = 
            |   "\\phi" 
            |   "\\Phi"
            ;
        
        greek_pi = 
            |   "\\pi" 
            |   "\\Pi"
            ;
        
        greek_varphi = 
            |   "\\varphi" 
            |   "\\VarPhi"
            ;


    
    l_paren = '(';
    r_paren =  ')';
    l_brace =  '{';
    r_brace = '}';
    l_bracket = '[';
    r_bracket = ']';
  
    symbol 
        = 
        | variable
        | constant
        ;
        
    variable
        =
        | 'x'
        | 'y'
        | 'z'
    ;
    
    constant = real ;
    func_lim =  "\\lim" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_int =  "\\int" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_sum =  "\\sum" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_prod = "\\prod" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_log =  "\\log" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_ln =   "\\ln" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_sin =  "\\sin" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_cos =  "\\cos" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_tan =  "\\tan" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_csc =  "\\csc" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_sec =  "\\sec" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_cot =  "\\cot" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arcsin = "\\arcsin" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arccos = "\\arccos" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arctan = "\\arctan" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arccsc = "\\arccsc" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arcsec = "\\arcsec" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arccot = "\\arccot" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_sinh = "\\sinh" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_cosh = "\\cosh" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_tanh = "\\tanh" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arsinh = "\\arsinh" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_arcosh = "\\arcosh" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_artanh = "\\artanh" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    func_sqrt = "\\sqrt" (l_paren|l_brace) (expression|variable|constant) (r_paren|r_brace) ;
    
    LIM_APPROACH_SYM
        =
        |'\\to' 
        | '\\rightarrow' 
        | '\\Rightarrow' 
        | '\\longrightarrow' 
        | '\\Longrightarrow'
        ;
    

    real 
        =
    |scientific
    |float
    |integer;
    
    scientific = /[0-9]*\.*[0-9]+[eEdD][+-]?[0-9]+/ ;
    
    float = /-?[0-9]*.[0-9]+/
    ;
    
    integer  = /\d+/
    ;
