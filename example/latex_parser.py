#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class CALCBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(CALCBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class CALCParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=CALCBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(CALCParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    @nomemo
    def _start_(self):  # noqa
        self._expression_()
        self._check_eof()

    @tatsumasu()
    @leftrec
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._expression_()
                self._token('+')
                self._term_()
            with self._option():
                self._expression_()
                self._token('-')
                self._term_()
            with self._option():
                self._expression_()
                self._cmpop_()
                self._expression_()
            with self._option():
                self._term_()
            self._error('no available options')

    @tatsumasu()
    @leftrec
    def _term_(self):  # noqa
        with self._choice():
            with self._option():
                self._term_()
                self._token('*')
                self._factor_()
            with self._option():
                self._term_()
                self._token('/')
                self._factor_()
            with self._option():
                self._factor_()
            self._error('no available options')

    @tatsumasu()
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')
                self._expression_()
                self._token(')')
            with self._option():
                self._latex_()
            with self._option():
                self._symbol_()
            self._error('no available options')

    @tatsumasu()
    def _cmpop_(self):  # noqa
        with self._choice():
            with self._option():
                self._Equal_()
            with self._option():
                self._NotEq_()
            with self._option():
                self._Lt_()
            with self._option():
                self._LtE_()
            with self._option():
                self._Gt_()
            with self._option():
                self._GtE_()
            self._error('no available options')

    @tatsumasu()
    def _Equal_(self):  # noqa
        self._token('=')

    @tatsumasu()
    def _NotEq_(self):  # noqa
        self._token('!=')

    @tatsumasu()
    def _Lt_(self):  # noqa
        self._token('<')

    @tatsumasu()
    def _LtE_(self):  # noqa
        self._token('<=')

    @tatsumasu()
    def _Gt_(self):  # noqa
        self._token('>')

    @tatsumasu()
    def _GtE_(self):  # noqa
        self._token('>=')

    @tatsumasu()
    def _latex_(self):  # noqa
        with self._choice():
            with self._option():
                self._func_lim_()
            with self._option():
                self._func_int_()
            with self._option():
                self._func_sum_()
            with self._option():
                self._func_prod_()
            with self._option():
                self._func_log_()
            with self._option():
                self._func_ln_()
            with self._option():
                self._func_sin_()
            with self._option():
                self._func_cos_()
            with self._option():
                self._func_tan_()
            with self._option():
                self._func_csc_()
            with self._option():
                self._func_sec_()
            with self._option():
                self._func_cot_()
            with self._option():
                self._func_arcsin_()
            with self._option():
                self._func_arccos_()
            with self._option():
                self._func_arctan_()
            with self._option():
                self._func_arccsc_()
            with self._option():
                self._func_arcsec_()
            with self._option():
                self._func_arccot_()
            with self._option():
                self._func_sinh_()
            with self._option():
                self._func_cosh_()
            with self._option():
                self._func_tanh_()
            with self._option():
                self._func_arsinh_()
            with self._option():
                self._func_arcosh_()
            with self._option():
                self._func_artanh_()
            with self._option():
                self._func_sqrt_()
            self._error('no available options')

    @tatsumasu()
    def _l_paren_(self):  # noqa
        self._token('(')

    @tatsumasu()
    def _r_paren_(self):  # noqa
        self._token(')')

    @tatsumasu()
    def _l_brace_(self):  # noqa
        self._token('{')

    @tatsumasu()
    def _r_brace_(self):  # noqa
        self._token('}')

    @tatsumasu()
    def _l_bracket_(self):  # noqa
        self._token('[')

    @tatsumasu()
    def _r_bracket_(self):  # noqa
        self._token(']')

    @tatsumasu()
    def _symbol_(self):  # noqa
        with self._choice():
            with self._option():
                self._variable_()
            with self._option():
                self._constant_()
            self._error('no available options')

    @tatsumasu()
    def _variable_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('x')
            with self._option():
                self._token('y')
            with self._option():
                self._token('z')
            self._error('no available options')

    @tatsumasu()
    def _constant_(self):  # noqa
        self._real_()

    @tatsumasu()
    def _func_lim_(self):  # noqa
        self._token('\\lim')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_int_(self):  # noqa
        self._token('\\int')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_sum_(self):  # noqa
        self._token('\\sum')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_prod_(self):  # noqa
        self._token('\\prod')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_log_(self):  # noqa
        self._token('\\log')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_ln_(self):  # noqa
        self._token('\\ln')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_sin_(self):  # noqa
        self._token('\\sin')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_cos_(self):  # noqa
        self._token('\\cos')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_tan_(self):  # noqa
        self._token('\\tan')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_csc_(self):  # noqa
        self._token('\\csc')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_sec_(self):  # noqa
        self._token('\\sec')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_cot_(self):  # noqa
        self._token('\\cot')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arcsin_(self):  # noqa
        self._token('\\arcsin')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arccos_(self):  # noqa
        self._token('\\arccos')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arctan_(self):  # noqa
        self._token('\\arctan')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arccsc_(self):  # noqa
        self._token('\\arccsc')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arcsec_(self):  # noqa
        self._token('\\arcsec')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arccot_(self):  # noqa
        self._token('\\arccot')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_sinh_(self):  # noqa
        self._token('\\sinh')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_cosh_(self):  # noqa
        self._token('\\cosh')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_tanh_(self):  # noqa
        self._token('\\tanh')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arsinh_(self):  # noqa
        self._token('\\arsinh')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_arcosh_(self):  # noqa
        self._token('\\arcosh')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_artanh_(self):  # noqa
        self._token('\\artanh')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _func_sqrt_(self):  # noqa
        self._token('\\sqrt')
        with self._group():
            with self._choice():
                with self._option():
                    self._l_paren_()
                with self._option():
                    self._l_brace_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._variable_()
                with self._option():
                    self._constant_()
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._r_paren_()
                with self._option():
                    self._r_brace_()
                self._error('no available options')

    @tatsumasu()
    def _LIM_APPROACH_SYM_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('\\to')
            with self._option():
                self._token('\\rightarrow')
            with self._option():
                self._token('\\Rightarrow')
            with self._option():
                self._token('\\longrightarrow')
            with self._option():
                self._token('\\Longrightarrow')
            self._error('no available options')

    @tatsumasu()
    def _cmd_times_(self):  # noqa
        self._token('\\times')

    @tatsumasu()
    def _cmd_cdot_(self):  # noqa
        self._token('\\cdot')

    @tatsumasu()
    def _cmd_div_(self):  # noqa
        self._token('\\div')

    @tatsumasu()
    def _cmd_frac_(self):  # noqa
        self._token('\\frac')

    @tatsumasu()
    def _cmd_mathig_(self):  # noqa
        self._token('\\mathit')

    @tatsumasu()
    def _real_(self):  # noqa
        with self._choice():
            with self._option():
                self._scientific_()
            with self._option():
                self._float_()
            with self._option():
                self._integer_()
            self._error('no available options')

    @tatsumasu()
    def _scientific_(self):  # noqa
        self._pattern('[0-9]*\\.*[0-9]+[eEdD][+-]?[0-9]+')

    @tatsumasu()
    def _float_(self):  # noqa
        self._pattern('-?[0-9]*.[0-9]+')

    @tatsumasu()
    def _integer_(self):  # noqa
        self._pattern('\\d+')


class CALCSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def cmpop(self, ast):  # noqa
        return ast

    def Equal(self, ast):  # noqa
        return ast

    def NotEq(self, ast):  # noqa
        return ast

    def Lt(self, ast):  # noqa
        return ast

    def LtE(self, ast):  # noqa
        return ast

    def Gt(self, ast):  # noqa
        return ast

    def GtE(self, ast):  # noqa
        return ast

    def latex(self, ast):  # noqa
        return ast

    def l_paren(self, ast):  # noqa
        return ast

    def r_paren(self, ast):  # noqa
        return ast

    def l_brace(self, ast):  # noqa
        return ast

    def r_brace(self, ast):  # noqa
        return ast

    def l_bracket(self, ast):  # noqa
        return ast

    def r_bracket(self, ast):  # noqa
        return ast

    def symbol(self, ast):  # noqa
        return ast

    def variable(self, ast):  # noqa
        return ast

    def constant(self, ast):  # noqa
        return ast

    def func_lim(self, ast):  # noqa
        return ast

    def func_int(self, ast):  # noqa
        return ast

    def func_sum(self, ast):  # noqa
        return ast

    def func_prod(self, ast):  # noqa
        return ast

    def func_log(self, ast):  # noqa
        return ast

    def func_ln(self, ast):  # noqa
        return ast

    def func_sin(self, ast):  # noqa
        return ast

    def func_cos(self, ast):  # noqa
        return ast

    def func_tan(self, ast):  # noqa
        return ast

    def func_csc(self, ast):  # noqa
        return ast

    def func_sec(self, ast):  # noqa
        return ast

    def func_cot(self, ast):  # noqa
        return ast

    def func_arcsin(self, ast):  # noqa
        return ast

    def func_arccos(self, ast):  # noqa
        return ast

    def func_arctan(self, ast):  # noqa
        return ast

    def func_arccsc(self, ast):  # noqa
        return ast

    def func_arcsec(self, ast):  # noqa
        return ast

    def func_arccot(self, ast):  # noqa
        return ast

    def func_sinh(self, ast):  # noqa
        return ast

    def func_cosh(self, ast):  # noqa
        return ast

    def func_tanh(self, ast):  # noqa
        return ast

    def func_arsinh(self, ast):  # noqa
        return ast

    def func_arcosh(self, ast):  # noqa
        return ast

    def func_artanh(self, ast):  # noqa
        return ast

    def func_sqrt(self, ast):  # noqa
        return ast

    def LIM_APPROACH_SYM(self, ast):  # noqa
        return ast

    def cmd_times(self, ast):  # noqa
        return ast

    def cmd_cdot(self, ast):  # noqa
        return ast

    def cmd_div(self, ast):  # noqa
        return ast

    def cmd_frac(self, ast):  # noqa
        return ast

    def cmd_mathig(self, ast):  # noqa
        return ast

    def real(self, ast):  # noqa
        return ast

    def scientific(self, ast):  # noqa
        return ast

    def float(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = CALCParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, CALCParser, name='CALC')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()

